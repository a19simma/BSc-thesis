import optuna
import gym
import numpy as np
import sys

from vizdoomEnv import VizDoomTrain
from callback import TrainCallback
from matplotlib import pyplot as plt
from stable_baselines3.common import env_checker
from stable_baselines3 import A2C, a2c

from stable_baselines3.common.evaluation import evaluate_policy #Använder inte dessa egentligen
from stable_baselines3.common.env_util import make_vec_env #  cmd_util har döpts om till env_util, men har deprekerats och kommer tas bort i framtiden

sys.setrecursionlimit(800)


# Basics methods for the vizdoom environment are:
# make_action which takes a list of button states given by an array of 0 or 1 with the 
# length of the number of buttons.
#

LOG_DIR = '../vizdoomlog/logs'

def optimize_a2c(trial):
    return{
        'gamma': trial.suggest_float("gamma", 0.0001, 0.1, log=True),
        'max_grad_norm': trial.suggest_float("max_grad_norm", 0.3, 5.0, log=True),
        'gae_lambda': trial.suggest_float("gae_lambda", 0.001, 0.2, log=True),
        'n_steps': trial.suggest_int("exponent_n_steps", 3, 10),
        'learning_rate': trial.suggest_float("lr", 1e-5, 1, log=True),
        'ent_coef': trial.suggest_float("ent_coef", 0.00000001, 0.1, log=True),
    }




def optimize_agent(trial):

    model_params = optimize_a2c(trial) #Den kallade till agentens optimering innan, som orsakade rekursivt problem

    env = VizDoomTrain('defend_the_center')
    #callback = TrainCallback(10000) #1h 18min ifall en save path vill läggas till
    model = A2C('MlpPolicy', env, tensorboard_log=LOG_DIR, verbose=1, **model_params)
    #model = PPO('CnnPolicy', env, tensorboard_log=LOG_DIR, verbose=1, learning_rate=0.0001, n_steps=4096)
    
    
    #n_steps ökas vid mer komplexa miljöer
    model.learn(2000)
    #model.learn(total_timesteps=10000, callback=callback)
    #model.learn(total_timesteps=10000)

    mean_reward, _ = evaluate_policy(model, env, n_eval_episodes=10)
    return -1 * mean_reward
    #return


if __name__ == '__main__':
    study = optuna.create_study()
    try:
        study.optimize(optimize_agent, n_trials=100)
    except KeyboardInterrupt:
        print('Interrupted by keyboard')
