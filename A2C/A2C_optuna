import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from vizdoomEnv import VizDoomTrain
from callback import TrainCallback
from stable_baselines3 import DQN, A2C, PPO
from stable_baselines3.common.logger import configure
from stable_baselines3.common.monitor import Monitor
from stable_baselines3.common.evaluation import evaluate_policy
import optuna

# optuna-dashboard postgresql+psycopg2://a2c:asdf4321@localhost:5432/optuna
# optuna-dashboard postgresql+psycopg2://a2c:asdf4321@localhost:5432/optuna
# optuna-dashboard postgresql+psycopg2://a2c:asdf4321@localhost:5432/optuna

SCENARIO = 'deadly_corridor'
TOTAL_TIMESTEPS = 1e6
ALGORITHM = "A2C"
STUDY_NAME = SCENARIO + "_" + ALGORITHM
LOG_DIR = 'logs/' + STUDY_NAME


#Variables and ranges taken from Optunas a2c example https://github.com/optuna/optuna-examples/blob/main/rl/sb3_simple.py
def optimize_a2c(trial):
    return{
        'gamma': trial.suggest_float("gamma", 0.1, 1, log=True),
        'max_grad_norm': trial.suggest_float("max_grad_norm", 0.1, 1, log=True),
        'gae_lambda': trial.suggest_float("gae_lambda", 0.1, 1, log=True),
        'learning_rate': trial.suggest_float("lr", 1e-5, 1, log=True),
    }

def optimize_agent(trial):
    model_params = optimize_a2c(trial) 
    RUN_NAME = 'Trial_' + str(trial.number) + '_'
    for key in model_params:
        RUN_NAME += key + '=' + str(model_params[key]) + '_'
        RUN_NAME = RUN_NAME[:-1]   

    env = VizDoomTrain(SCENARIO)
    env = Monitor(env)
    model = A2C('CnnPolicy', env, tensorboard_log=LOG_DIR, verbose=0, **model_params, n_steps=2048)
    logger = configure(LOG_DIR + '/' + RUN_NAME, ["stdout", "csv", "tensorboard"])
    model.set_logger(logger)
    callback = TrainCallback(25000, LOG_DIR + '/' + RUN_NAME)
    model.learn(total_timesteps=TOTAL_TIMESTEPS, callback=callback, log_interval=1)
    mean_reward, _ = evaluate_policy(model, env, n_eval_episodes=10)
    return mean_reward

if __name__ == '__main__':
    # for the distributed solution a mysql server is needed with a database names optuna
    study = optuna.create_study(direction='maximize', study_name=STUDY_NAME,
                                storage="postgresql://a2c:asdf4321@localhost/optuna", load_if_exists=True)
    try:
        study.optimize(optimize_agent, n_jobs=-1, n_trials=50, gc_after_trial=True)
    except KeyboardInterrupt:
        print('Interrupted by keyboard')

